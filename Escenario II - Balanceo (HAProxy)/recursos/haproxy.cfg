# Parámetros globales
global
	# Indicar como se realiza el log
	log /dev/log	local0
	log /dev/log	local1 notice

	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s

	# Indicar el usuario y grupo del sistema que ejecuta haproxy
	user haproxy
	group haproxy

	# Funcionar como demonio
	daemon

	# Localización por defecto para certificados y claves SSL
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Algoritmos de cifrado por defecto para sockets con SSL habilitado
	# En este ejemplo se han dejado algunos de los más seguros, pero hay más
	# Ver: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
	# Para comprobar: https://www.ssllabs.com/ssltest/
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

	# Número máximo de conexiones globales
	maxconn 4096

	# Si queremos depurar podemos utilizar las siguientes directivas:
	# Deshabilitar la ejecución en segundo plano y sacar toda la información por
	# salida estándar
	#debug

	# Hacer que no se muestre información en el arranque
	#quiet


# Configuracion que se aplica a todos los frontend por defecto
defaults
	# Utilizar el log definido en la seccion global
	log	 global

	# Indicar que el modo es HTTP, ya que se trata de un balanceador web
	mode	http

	# Opciones de registro
	option  httplog
	option  dontlognull

	# Timeouts por defecto (en milisegundos)
	# - Tiempo máximo para conectar a un servidor de backend
	timeout connect 5000
	# - Tiempo que esperamos a un cliente inactivo
	timeout client  50000
	# - Tiempo que esperamos a un servidor inactivo
	timeout server  50000

	# Archivos de error por defecto
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

	# Indicar el número de reintentos de chequeo de un servidor de backend antes
	# de darlo por muerto
	retries 3

	# Permitir que un cliente sea redirigido si tiene persistencia en un
	# servidor de backend que se cae
	option redispatch

	# Número máximo de conexiones en el balanceador
	maxconn 2000


# Definimos el balanceador HTTP mediante un proxy definido con listen
listen balanceador
	# Indicar la IP y el puerto por donde se conectarán los clientes al
	# balanceador
	bind <ip_balanceador>:80

	# Indicar el algoritmo de balanceo utilizado (roundrobin incluye peso)
	balance roundrobin

	# Archivo que el balanceador pedirá a los servidores web periódicamente
	# para comprobar si siguen con vida
	option httpchk GET /accesible.html

	# server es una directiva compleja y admite multitud de parámetros, como
	# podemos ver en:
	# http://cbonte.github.io/haproxy-dconv/1.6/configuration.html#5
	# - check provoca que los servidores sean comprobados cada cierto tiempo
	#   para mantenerlos activos
	# - inter indica el tiempo en milisengundos entre chequeos
	# - rise indica el número de chequeos positivos consecutivos necesarios para
	#   considerar el servidor online
	# - fall indica el número de chequeos negativos consecutivos necesarios para
	#   considerar el servidor caído
	# - weight indica el peso del servidor dentro del conjunto
	server host1 <ip_nodo1>:80 check inter 2000 rise 2 fall 3 weight 50
	server host2 <ip_nodo2>:80 check inter 2000 rise 2 fall 3 weight 50
